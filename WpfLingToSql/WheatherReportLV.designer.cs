#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfLingToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WheatherReportLV")]
	public partial class WheatherReportLVDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertInhabitatnts(Inhabitatnts instance);
    partial void UpdateInhabitatnts(Inhabitatnts instance);
    partial void DeleteInhabitatnts(Inhabitatnts instance);
    partial void InsertPrecipitations(Precipitations instance);
    partial void UpdatePrecipitations(Precipitations instance);
    partial void DeletePrecipitations(Precipitations instance);
    partial void InsertRegions(Regions instance);
    partial void UpdateRegions(Regions instance);
    partial void DeleteRegions(Regions instance);
    partial void InsertWheathers(Wheathers instance);
    partial void UpdateWheathers(Wheathers instance);
    partial void DeleteWheathers(Wheathers instance);
    #endregion
		
		public WheatherReportLVDataContext() : 
				base(global::WpfLingToSql.Properties.Settings.Default.WheatherReportLVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WheatherReportLVDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheatherReportLVDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheatherReportLVDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WheatherReportLVDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Inhabitatnts> Inhabitatnts
		{
			get
			{
				return this.GetTable<Inhabitatnts>();
			}
		}
		
		public System.Data.Linq.Table<Precipitations> Precipitations
		{
			get
			{
				return this.GetTable<Precipitations>();
			}
		}
		
		public System.Data.Linq.Table<Regions> Regions
		{
			get
			{
				return this.GetTable<Regions>();
			}
		}
		
		public System.Data.Linq.Table<Wheathers> Wheathers
		{
			get
			{
				return this.GetTable<Wheathers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inhabitatnts")]
	public partial class Inhabitatnts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Language;
		
		private EntitySet<Regions> _Regions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    #endregion
		
		public Inhabitatnts()
		{
			this._Regions = new EntitySet<Regions>(new Action<Regions>(this.attach_Regions), new Action<Regions>(this.detach_Regions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inhabitatnts_Regions", Storage="_Regions", ThisKey="Id", OtherKey="IdInhabitant")]
		public EntitySet<Regions> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Regions(Regions entity)
		{
			this.SendPropertyChanging();
			entity.Inhabitatnts = this;
		}
		
		private void detach_Regions(Regions entity)
		{
			this.SendPropertyChanging();
			entity.Inhabitatnts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Precipitations")]
	public partial class Precipitations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Wheathers> _Wheathers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Precipitations()
		{
			this._Wheathers = new EntitySet<Wheathers>(new Action<Wheathers>(this.attach_Wheathers), new Action<Wheathers>(this.detach_Wheathers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precipitations_Wheathers", Storage="_Wheathers", ThisKey="Id", OtherKey="IdPrecipitation")]
		public EntitySet<Wheathers> Wheathers
		{
			get
			{
				return this._Wheathers;
			}
			set
			{
				this._Wheathers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wheathers(Wheathers entity)
		{
			this.SendPropertyChanging();
			entity.Precipitations = this;
		}
		
		private void detach_Wheathers(Wheathers entity)
		{
			this.SendPropertyChanging();
			entity.Precipitations = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Regions")]
	public partial class Regions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private int _Area;
		
		private int _IdInhabitant;
		
		private EntitySet<Wheathers> _Wheathers;
		
		private EntityRef<Inhabitatnts> _Inhabitatnts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnIdInhabitantChanging(int value);
    partial void OnIdInhabitantChanged();
    #endregion
		
		public Regions()
		{
			this._Wheathers = new EntitySet<Wheathers>(new Action<Wheathers>(this.attach_Wheathers), new Action<Wheathers>(this.detach_Wheathers));
			this._Inhabitatnts = default(EntityRef<Inhabitatnts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInhabitant", DbType="Int NOT NULL")]
		public int IdInhabitant
		{
			get
			{
				return this._IdInhabitant;
			}
			set
			{
				if ((this._IdInhabitant != value))
				{
					if (this._Inhabitatnts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInhabitantChanging(value);
					this.SendPropertyChanging();
					this._IdInhabitant = value;
					this.SendPropertyChanged("IdInhabitant");
					this.OnIdInhabitantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Regions_Wheathers", Storage="_Wheathers", ThisKey="Id", OtherKey="IdRegion")]
		public EntitySet<Wheathers> Wheathers
		{
			get
			{
				return this._Wheathers;
			}
			set
			{
				this._Wheathers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inhabitatnts_Regions", Storage="_Inhabitatnts", ThisKey="IdInhabitant", OtherKey="Id", IsForeignKey=true)]
		public Inhabitatnts Inhabitatnts
		{
			get
			{
				return this._Inhabitatnts.Entity;
			}
			set
			{
				Inhabitatnts previousValue = this._Inhabitatnts.Entity;
				if (((previousValue != value) 
							|| (this._Inhabitatnts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inhabitatnts.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Inhabitatnts.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._IdInhabitant = value.Id;
					}
					else
					{
						this._IdInhabitant = default(int);
					}
					this.SendPropertyChanged("Inhabitatnts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wheathers(Wheathers entity)
		{
			this.SendPropertyChanging();
			entity.Regions = this;
		}
		
		private void detach_Wheathers(Wheathers entity)
		{
			this.SendPropertyChanging();
			entity.Regions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wheathers")]
	public partial class Wheathers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdRegion;
		
		private System.DateTime _Date;
		
		private int _Temperature;
		
		private int _IdPrecipitation;
		
		private EntityRef<Precipitations> _Precipitations;
		
		private EntityRef<Regions> _Regions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdRegionChanging(int value);
    partial void OnIdRegionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTemperatureChanging(int value);
    partial void OnTemperatureChanged();
    partial void OnIdPrecipitationChanging(int value);
    partial void OnIdPrecipitationChanged();
    #endregion
		
		public Wheathers()
		{
			this._Precipitations = default(EntityRef<Precipitations>);
			this._Regions = default(EntityRef<Regions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRegion", DbType="Int NOT NULL")]
		public int IdRegion
		{
			get
			{
				return this._IdRegion;
			}
			set
			{
				if ((this._IdRegion != value))
				{
					if (this._Regions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRegionChanging(value);
					this.SendPropertyChanging();
					this._IdRegion = value;
					this.SendPropertyChanged("IdRegion");
					this.OnIdRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Int NOT NULL")]
		public int Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPrecipitation", DbType="Int NOT NULL")]
		public int IdPrecipitation
		{
			get
			{
				return this._IdPrecipitation;
			}
			set
			{
				if ((this._IdPrecipitation != value))
				{
					if (this._Precipitations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPrecipitationChanging(value);
					this.SendPropertyChanging();
					this._IdPrecipitation = value;
					this.SendPropertyChanged("IdPrecipitation");
					this.OnIdPrecipitationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Precipitations_Wheathers", Storage="_Precipitations", ThisKey="IdPrecipitation", OtherKey="Id", IsForeignKey=true)]
		public Precipitations Precipitations
		{
			get
			{
				return this._Precipitations.Entity;
			}
			set
			{
				Precipitations previousValue = this._Precipitations.Entity;
				if (((previousValue != value) 
							|| (this._Precipitations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Precipitations.Entity = null;
						previousValue.Wheathers.Remove(this);
					}
					this._Precipitations.Entity = value;
					if ((value != null))
					{
						value.Wheathers.Add(this);
						this._IdPrecipitation = value.Id;
					}
					else
					{
						this._IdPrecipitation = default(int);
					}
					this.SendPropertyChanged("Precipitations");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Regions_Wheathers", Storage="_Regions", ThisKey="IdRegion", OtherKey="Id", IsForeignKey=true)]
		public Regions Regions
		{
			get
			{
				return this._Regions.Entity;
			}
			set
			{
				Regions previousValue = this._Regions.Entity;
				if (((previousValue != value) 
							|| (this._Regions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Regions.Entity = null;
						previousValue.Wheathers.Remove(this);
					}
					this._Regions.Entity = value;
					if ((value != null))
					{
						value.Wheathers.Add(this);
						this._IdRegion = value.Id;
					}
					else
					{
						this._IdRegion = default(int);
					}
					this.SendPropertyChanged("Regions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
